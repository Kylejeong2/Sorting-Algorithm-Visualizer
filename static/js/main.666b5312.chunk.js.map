{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SortingVisualizer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","resetArray","min","max","random","setState","_loop","arrayBars","document","getElementsByClassName","_animations$i","slicedToArray","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","_animations$i2","newHeight","height","concat","_this2","react_default","a","createElement","className","map","value","idx","key","onClick","mergeSort","quickSort","heapSort","bubbleSort","React","Component","App","SortingVisualizer_SortingVisualizer_SortingVisualizer","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"qPAAO,SAASA,EAAuBC,GACnC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAE7B,OAGF,SAASC,EACPC,EACAC,EACAC,EACAL,EACAF,GAEA,GAAIM,IAAaC,EAAQ,OACzB,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAU,GACnDH,EAAgBF,EAAgBI,EAAUE,EAAWH,EAAWL,GAChEI,EAAgBF,EAAgBM,EAAY,EAAGD,EAAQF,EAAWL,IAIpE,SACEK,EACAC,EACAE,EACAD,EACAL,EACAF,GAEA,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAY,EACpB,KAAOI,GAAKJ,GAAaK,GAAKN,GAE5BP,EAAWc,KAAK,CAACF,EAAGC,IAEpBb,EAAWc,KAAK,CAACF,EAAGC,IAChBX,EAAeU,IAAMV,EAAeW,IAEtCb,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,OAGhCZ,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,MAGpC,KAAOD,GAAKJ,GAEVR,EAAWc,KAAK,CAACF,EAAGA,IAEpBZ,EAAWc,KAAK,CAACF,EAAGA,IAEpBZ,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,KAElC,KAAOC,GAAKN,GAEVP,EAAWc,KAAK,CAACD,EAAGA,IAEpBb,EAAWc,KAAK,CAACD,EAAGA,IAEpBb,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,KA7ClCE,CAAQV,EAAWC,EAAUE,EAAWD,EAAQL,EAAgBF,GAfhEI,CAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAgBF,GACrDA,YCWUgB,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACX1B,MAAO,IAJQmB,mFASjBG,KAAKK,kDAKL,IADA,IAwF2BC,EAAKC,EAxF1B7B,EAAQ,GACLa,EAAI,EAAGA,EAvBS,IAuBiBA,IACxCb,EAAMe,MAsFmBa,EAtFQ,EAsFHC,EAtFM,IAwFjCnB,KAAKC,MAAMD,KAAKoB,UAAYD,EAAMD,EAAM,GAAKA,KAtFlDN,KAAKS,SAAS,CAAC/B,8CAKf,IADA,IAAMC,EAAaF,EAAuBuB,KAAKI,MAAM1B,OAD3CgC,EAAA,SAEDnB,GACP,IAAMoB,EAAYC,SAASC,uBAAuB,aAElD,GADsBtB,EAAI,IAAM,EACb,KAAAuB,EAAAhB,OAAAiB,EAAA,EAAAjB,CACcnB,EAAWY,GADzB,GACVyB,EADUF,EAAA,GACCG,EADDH,EAAA,GAEXI,EAAcP,EAAUK,GAAWG,MACnCC,EAAcT,EAAUM,GAAWE,MACnCE,EAAQ9B,EAAI,IAAM,EAhCR,MAHF,YAoCd+B,WAAW,WACTJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,GA5Cb,EA6ChB9B,QAEH+B,WAAW,WAAM,IAAAE,EAAA1B,OAAAiB,EAAA,EAAAjB,CACgBnB,EAAWY,GAD3B,GACRyB,EADQQ,EAAA,GACGC,EADHD,EAAA,GAEKb,EAAUK,GAAWG,MAC7BO,OAAZ,GAAAC,OAAwBF,EAAxB,OAlDiB,EAmDhBlC,IAjBEA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAKmB,EAAnCnB,mJAoDF,IAAAqC,EAAA5B,KACAtB,EAASsB,KAAKI,MAAd1B,MAEP,OACEmD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACZtD,EAAMuD,IAAI,SAACC,EAAOC,GAAR,OACTN,EAAAC,EAAAC,cAAA,OACEC,UAAU,YACVI,IAAKD,EACLhB,MAAO,CACLI,gBA1FQ,YA2FRG,OAAM,GAAAC,OAAKO,EAAL,WAGZL,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMT,EAAKvB,eAA5B,sBACAwB,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMT,EAAKU,cAA5B,cACAT,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMT,EAAKW,cAA5B,cACAV,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMT,EAAKY,aAA5B,aACAX,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMT,EAAKa,eAA5B,uBA7FuCC,IAAMC,iBCJtCC,MARf,WACE,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACc,EAAD,QCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWhD,SAASiD,eAAe,SACpDC,OACHjC,EAAAC,EAAAC,cAACF,EAAAC,EAAMiC,WAAP,KACElC,EAAAC,EAAAC,cAACiC,EAAD,QAOJlB","file":"static/js/main.666b5312.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }","import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 2;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 310;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    \n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n\n  // testSortingAlgorithms() {\n  //   for (let i = 0; i < 100; i++) {\n  //     const array = [];\n  //     const length = randomIntFromInterval(1, 1000);\n  //     for (let i = 0; i < length; i++) {\n  //       array.push(randomIntFromInterval(-1000, 1000));\n  //     }\n  //     const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  //     const mergeSortedArray = getMergeSortAnimations(array.slice());\n  //     console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n  //   }\n  // }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        {/* <button onClick={() => this.testSortingAlgorithms()}>\n          Test Sorting Algorithms (BROKEN)\n        </button> */}\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}